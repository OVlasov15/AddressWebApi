// <auto-generated />
using System;
using AddressWebApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AddressWebApi.Migrations
{
    [DbContext(typeof(AddressContext))]
    [Migration("20231215120131_AddCityDistrictTable")]
    partial class AddCityDistrictTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddressWebApi.Entities.CityDistrict", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettlementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SettlementId");

                    b.ToTable("CityDistricts");
                });

            modelBuilder.Entity("AddressWebApi.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AmountRegionDistrict")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AddressWebApi.Entities.RegionDistrict", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionDistricts");
                });

            modelBuilder.Entity("AddressWebApi.Entities.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionDistrictId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionDistrictId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("AddressWebApi.Entities.CityDistrict", b =>
                {
                    b.HasOne("AddressWebApi.Entities.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("AddressWebApi.Entities.RegionDistrict", b =>
                {
                    b.HasOne("AddressWebApi.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AddressWebApi.Entities.Settlement", b =>
                {
                    b.HasOne("AddressWebApi.Entities.RegionDistrict", "RegionDistrict")
                        .WithMany()
                        .HasForeignKey("RegionDistrictId");

                    b.Navigation("RegionDistrict");
                });
#pragma warning restore 612, 618
        }
    }
}
